{"version":3,"sources":["meteor://ðŸ’»app/imports/api/DOCX/docx.js","meteor://ðŸ’»app/imports/api/IPFS/ipfs.js","meteor://ðŸ’»app/imports/api/PDF/pdf.js","meteor://ðŸ’»app/imports/api/compiler/compiler.js","meteor://ðŸ’»app/imports/api/documents/documents.js","meteor://ðŸ’»app/imports/api/encryption/encryption.js","meteor://ðŸ’»app/imports/api/wallet/wallet.js","meteor://ðŸ’»app/server/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["const fs = require('fs');\n\nif (Meteor.isServer) {\n\nMeteor.methods({\n\n'readFile': function(inputFile) {\n fs.readFile(inputFile, 'utf-8', function(err, html) {\n if (err) return err;\n console.log(html);\n return html;\n  });\n},\n\n'writeFile' : function(outputFile, docx) {\nfs.writeFile(outputFile, docx, function(err) {\n    if (err) return err;\n  });\n }\n\n});\n\n}\n\n\n\n\n/*\n\nvar HtmlDocx = require('html-docx-js');\n    var inputFile = '~/test.html';\n    var outputFile = 'text.docx';\n    Meteor.call('readFile', inputFile, function(err, html) {\n    if (err) console.log(err);\n    var docx = HtmlDocx.asBlob(html);\n    Meteor.call('writeFile', outputFile, docx, function(err) {\n    if (err) console.log(err);\n    });\n\n\n */","import { ipfs } from 'meteor/akasha:meteor-ipfs';\n//import ipfsAPI from 'ipfs-api';\n\n// for global access on server side\nipfsObj = false;\n\n\n/* var hash = 'QmQ1xrPzKaFharLbkqoFnhrXN1cLpdQj6RstVrVS9zhAEu';\n    Meteor.call('ipfsCat', hash, function(err,resp){\n    if ( err ) {\n    console.log( err );\n    } else {\n    console.log( resp );\n        }\n    }); */\n\n    /* Meteor.call('ipfsAdd', \"Needs to be html\", function(err,resp){\n    if ( err ) {\n    console.log( err );\n    } else {\n    console.log( resp );\n        }\n    });\n\n    */","import { core } from 'meteor/jspdf:core';\n\nif (Meteor.isServer) {\n\t Meteor.methods({\n    'createPDF': function() {\n \t\tvar doc = new jsPDF();\n\t\tdoc.text(20, 20, 'Hello world.');\n\t\tdoc.save('Test.pdf');\n    }\n  });\n}\n\n/*\n\nvar doc = new jsPDF();\n    doc.text(20, 20, 'Hello world.');\n    doc.save('Test.pdf');\n    Meteor.call('ipfsAdd', \"Needs to be html\", function(err,resp){\n    if ( err ) {\n    console.log( err );\n    } else {\n    console.log( resp );\n        }\n    });\n\n    */","//import compile from './node_modules/solc/bin/soljson-latest.js';\n//import solc from './bin/soljson-latest.js';\n//import solc from 'solc';\nimport { solc } from 'meteor/silentcicero:solc-compiler';\n\nif (Meteor.isServer) {\n\t Meteor.methods({\n    'compile': function(input, options) {\n      var future = new Future();\n      var codeInput = input;\n      var response = solc.compile(codeInput, options);\n      future.return(response);\n      return future.wait();\n    }\n\n  });\n}\n\n\n\n","import { Mongo } from 'meteor/mongo';\n\nDocuments = new Mongo.Collection('Documents');\n","import openpgp from 'openpgp';\n\nif (Meteor.isServer) {\n\nMeteor.methods({\n\n     'encrypt': function(message, publicKey) {\n      var future = new Future();\n      var openpgp = require('openpgp');\n      openpgp.initWorker({ path:'openpgp.worker.js' });\n      openpgp.config.aead_protect = true;\n      var options, encrypted;\n      var pubkey = publicKey;\n      //var privkey = '-----BEGIN PGP PRIVATE KEY BLOCK ... END PGP PRIVATE KEY BLOCK-----';\n      options = {\n        data: message,                             // input as String (or Uint8Array) \n        publicKeys: openpgp.key.readArmored(pubkey).keys,  // for encryption \n        //privateKeys: openpgp.key.readArmored(privkey).keys // for signing (optional) \n      };\n      openpgp.encrypt(options).then(function(ciphertext) {\n      encrypted = ciphertext.data; // '-----BEGIN PGP MESSAGE ... END PGP MESSAGE-----' \n      });\n      console.log(ciphertext.data);\n      var response = encrypted;\n      future.return(response);\n      return future.wait();\n},\n    'createKeys' : function() {\n      var future = new Future();\n      var openpgp = require('openpgp');\n      openpgp.initWorker({ path:'openpgp.worker.js' });\n      openpgp.config.aead_protect = true;\n      var options = {\n        userIds: [{ name:'Jon Smith', email:'jon@example.com' }], // multiple user IDs\n        numBits: 4096,                                            // RSA key size\n        passphrase: 'super long and hard to guess secret'         // protects the private key\n        };\n      openpgp.generateKey(options).then(function(key) {\n        var privkey = key.privateKeyArmored; // '-----BEGIN PGP PRIVATE KEY BLOCK ... '\n        var pubkey = key.publicKeyArmored;   // '-----BEGIN PGP PUBLIC KEY BLOCK ... '\n        console.log(pubkey);\n        var keyPair = [privkey, pubkey];\n        var response = keyPair[0];\n        future.return(response);\n        return future.wait();\n        });\n    },\n\n     'decrypt': function(message, privateK) {\n      var future = new Future();\n      var pgpMessage = message;\n      pgpMessage = openpgp.message.readArmored(pgpMessage);\n      var key = privateK;\n      var privateKey = openpgp.key.readArmored(key).keys[0];\n      privateKey.decrypt('passphrase');\n      openpgp.decryptMessage(privateKey, pgpMessage).then(function(plaintext) {\n        console.log(plaintext);\n        var plaintext = plaintext;\n        future [\"return\"] (plaintext)\n        });\n      return future.wait();\n    }\n\n  });\n}","import { Accounts } from 'meteor/silentcicero:ethereumjs-accounts';\n\n// create Account\n\n/* 'click #createAccount': function(e) {\n    e.preventDefault();\n    var accounts = new Accounts({minPassphraseLength: 6});\n    var accountObject = accounts.new('myPassphrase');\n    console.log(accountObject);\n},\n\n*/","import { Meteor } from 'meteor/meteor';\nimport '../imports/startup/server/index.js';\nimport '../imports/api/documents/documents.js';\nimport '../imports/api/compiler/compiler.js';\nimport '../imports/api/encryption/encryption.js';\nimport '../imports/api/wallet/wallet.js';\nimport '../imports/api/IPFS/ipfs.js';\nimport '../imports/api/PDF/pdf.js';\nimport '../imports/api/DOCX/docx.js';\n\nMeteor.startup(() => {\n  process.env.MONGO_URL = 'mongodb://root:xAw5orybyg@olympia.modulusmongo.net:27017/ymEhe9ju?autoReconnect=true&connectTimeoutMS=60000';\n /* ipfsObj =  IpfsConnector.getInstance(); //singleton\n  ipfsObj.setLogLevel('info'); // info is default\n  const testIpfs = function () {\n  // start ipfs daemon\n  let started = ipfsObj.start();\n  // wait for process to start\n  if (started) {\n    // test api calls https://www.npmjs.com/package/ipfs-api\n    ipfsObj.api.add(new Buffer('random stuff'), (err, data)=> {\n      console.log('ipfs hash ' + data[0].Hash);\n    });\n  }\n};\n   testIpfs(); */\n});\n"]}