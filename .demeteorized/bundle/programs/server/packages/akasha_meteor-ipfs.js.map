{"version":3,"sources":["meteor://ðŸ’»app/packages/akasha:meteor-ipfs/lib/ipfsConnector.js","meteor://ðŸ’»app/packages/akasha:meteor-ipfs/lib/ipfsServerMethods.js"],"names":[],"mappings":"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","file":"/packages/akasha_meteor-ipfs.js","sourcesContent":["const binariesVersion = '0.3.9_';\nconst path            = Npm.require('path');\nconst ipfsAPI         = Npm.require('ipfs-api');\nconst Future          = Npm.require('fibers/future');\nconst exec            = Npm.require('child_process').exec;\nconst writeJson       = Meteor.wrapAsync(Fse.outputJson);\n\nconst device     = process.platform + '-' + process.arch;\nconst projectDir = process.env.PWD + '/';\nconst homeDir    = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];\n\nconst assetsDir  = '.private';\nconst configFile = 'ipfs.json';\nconst execPath   = path.join(projectDir, assetsDir);\n\nconst ipfsFolder = 'ipfs';\nconst ipfsRoot   = path.join(execPath, ipfsFolder);\nconst assetsRoot = 'https://gobuilder.me/get/github.com/ipfs/go-ipfs/cmd/ipfs/ipfs_v' + binariesVersion;\n\nconst log = loglevel.createPackageLogger('akasha:meteor-ipfs', defaultLevel = 'info');\nconst logLevels = ['trace', 'fine', 'debug', 'info', 'warn', 'error'];\n\nconst binaries = {\n  'linux-arm':  assetsRoot + 'linux-arm.zip',\n  'linux-ia32': assetsRoot + 'linux-386.zip',\n  'linux-x64':  assetsRoot + 'linux-amd64.zip',\n  'darwin-x64': assetsRoot + 'darwin-amd64.zip',\n  'win32-ia32': assetsRoot + 'windows-386.zip',\n  'win32-x64':  assetsRoot + 'windows-amd64.zip'\n};\n\nconst symbolEnforcer = Symbol();\nconst symbol         = Symbol();\n\nIpfsConnector = class IpfsConnector {\n\n  constructor (enforcer) {\n    if (enforcer !== symbolEnforcer) {\n      throw new Meteor.Error('singleton-enforce', 'Cannot construct singleton');\n    }\n    this.ipfsConnector = false;\n    this.config        = false;\n    this.api           = false;\n    this.sock          = '/ip4/127.0.0.1/tcp/5001';\n    this.ipsProcess    = new LongRunningChildProcess('ipfsProcess');\n    this.executable    = path.join(ipfsRoot, ((process.platform == 'win32') ? 'ipfs.exe' : 'ipfs'));\n  }\n\n  static getInstance () {\n    if (!this[symbol]) {\n      this[symbol] = new IpfsConnector(symbolEnforcer);\n    }\n    return this[symbol];\n  }\n\n  /**\n   * start ipfs\n   * @returns {*}\n   */\n  start () {\n    if (!this.ipfsConnector) {\n      const future = new Future();\n      let config   = this._checkConfig();\n      if (config) {\n        let options = {\n          command: this.executable,\n          args:    ['daemon']\n        };\n        log.info('starting ipfs daemon from ' + this.executable);\n        this.ipfsConnector = this.ipsProcess.spawn(options);\n        Meteor.setTimeout(()=> {\n          this.api = ipfsAPI(this.sock);\n          log.info('connecting to ipfsAPI on ' + this.sock);\n          future.return(true);\n        }, 4000);\n\n      } else {\n        log.error('error getting ipfs config');\n        future.throw(true);\n      }\n      return future.wait();\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @returns {*|any}\n   * @private\n   */\n  _checkConfig () {\n    const future = new Future();\n    Fse.stat(path.join(execPath, configFile), Meteor.bindEnvironment((err, stats)=> {\n      if (!stats) {\n        let hasAssets = this._getAssets(true);\n        if (hasAssets) {\n          let init = this._init();\n          if (init) {\n            this._writeToConfig();\n            future.return(true);\n          } else {\n            log.error('could not init ipfs');\n            future.throw(true);\n          }\n        } else {\n          log.error('could not download ipfs');\n          future.throw(true);\n        }\n      } else {\n        Fse.readJson(path.join(execPath, configFile), Meteor.bindEnvironment((er, config)=> {\n          if (er) {\n            future.throw(er);\n          } else {\n            this.config   = config;\n            let hasAssets = this._getAssets();\n            if (hasAssets) {\n              this._writeToConfig();\n              let init = this._init();\n              if (init) {\n                future.return(true);\n              } else {\n                future.throw(false);\n              }\n            } else {\n              future.return(true);\n            }\n          }\n        }));\n      }\n    }));\n    return future.wait();\n  }\n\n  /**\n   * run <code>ipfs init</code>\n   * @returns {*|any}\n   * @private\n   */\n  _init () {\n    const future = new Future();\n    let q        = exec(this.executable + ' init');\n\n    q.on('exit', (code)=> {\n      future.return(true);\n    });\n\n    q.on('error', (err)=> {\n      future.throw(err);\n    });\n    return future.wait();\n  }\n\n  /**\n   * donwload and unzip ipfs\n   * @param force\n   * @returns {boolean}\n   * @private\n   */\n  _getAssets (force = false) {\n    let hasInit = this._checkIpfsConfig();\n    if (!hasInit) {\n      force = true;\n    }\n    if (force || (this.config.version != binariesVersion)) {\n      const zipPath = path.join(execPath, 'ipfs-' + binariesVersion + '.zip');\n      const future  = new Future();\n\n      Shelljs.mkdir('-p', ipfsRoot);\n\n      const file = Fse.createWriteStream(zipPath);\n      Request.get(binaries[device]).on('response', function (response) {\n\n        /** nice message for download **/\n        if (response.statusCode == 200) {\n          log.info('====Started to download IPFS binaries===');\n        }\n      }).on('error', function (error) {\n\n        log.error('!!!Could not download IPFS binaries!!!');\n        future.throw('could not download IPFS');\n      }).pipe(file).on('finish', ()=> {\n        log.info('====download completed...unzipping files...====');\n\n        /** extract .zip contents to .private/ipfs **/\n        let zip = new AdmZip(zipPath);\n        zip.extractAllTo(execPath);\n\n        /** just to be sure that ipfs is executable **/\n        Shelljs.chmod('+x', path.join(ipfsRoot,\n          ((process.platform == 'win32') ? 'ipfs.exe' : 'ipfs')));\n        log.info('finished');\n        this._delZip();\n        future.return(true);\n      });\n      return future.wait();\n    }\n    return false;\n  }\n\n  /**\n   * write current ipfs version\n   * @private\n   */\n  _writeToConfig () {\n    writeJson(path.join(execPath, configFile), {version: binariesVersion}, Meteor.bindEnvironment((error)=> {\n      if (error) {\n        log.error('could not write to ipfs.json');\n      } else {\n        this.config = {version: binariesVersion};\n      }\n    }));\n  }\n\n  /**\n   * check if <code>ipfs init</code>\n   * @returns {*|any}\n   * @private\n   */\n  _checkIpfsConfig () {\n    const future = new Future();\n    Fse.stat(path.join(homeDir, '.ipfs/config'), Meteor.bindEnvironment((err, stats)=> {\n      if (err) {\n        future.return(false);\n      } else {\n        future.return(true);\n      }\n    }));\n    return future.wait();\n  }\n\n  stop () {\n    this._kill();\n    this.ipfsConnector = false;\n  }\n\n  /**\n   * kill child process & cleanup\n   * @private\n   */\n  _kill () {\n    this.ipfsProcess.kill();\n  }\n\n  /**\n   * delete ipfs archives\n   * @private\n   */\n  _delZip () {\n    Shelljs.rm('-rf', path.join(execPath, 'ipfs-*.zip'));\n  }\n\n  /**\n   *\n   * @param level from $logLevels\n   */\n  setLogLevel (level = 'info') {\n    if (logLevels.indexOf(level) != -1) {\n      log.setLevel(level);\n    } else {\n      log.error('level not from logLevels ', logLevels);\n    }\n  }\n};","const Future = Npm.require('fibers/future');\n\nMeteor.methods(\n  {\n    ipfsCat (hash) {\n\n      check(hash, String);\n      let wrappedFiber;\n      let wrappedApi;\n      let ipfsStream;\n      let instance     = IpfsConnector.getInstance();\n      let currentChunk = new Buffer(0);\n\n      if (!instance.api) {\n        throw new Meteor.Error('ipfs-not-started', 'ipfs process is not running');\n      }\n\n      wrappedApi = Meteor.wrapAsync(instance.api.cat);\n      ipfsStream = wrappedApi(hash);\n\n      if (ipfsStream.readable) {\n        wrappedFiber = new Future();\n        ipfsStream.on('data', function (chunk) {\n          currentChunk = Buffer.concat([currentChunk, chunk]);\n        });\n        ipfsStream.on('end', function () {\n          wrappedFiber.return(currentChunk.toString());\n        });\n        ipfsStream.on('error', function (err) {\n          wrappedFiber.throw(err);\n        });\n        return wrappedFiber.wait();\n      }\n      return ipfsStream;\n    },\n\n    /**\n     *\n     * @param content\n     * @param isArrayBuffer\n     */\n    ipfsAdd (content) {\n      //check(content, String);\n      let wrappedApi;\n      let wrappedFiber = new Future();\n      let instance     = IpfsConnector.getInstance();\n\n      if (!instance.api) {\n        return new Meteor.Error('ipfs-not-started', 'ipfs process is not running');\n      }\n\n      wrappedApi = Meteor.wrapAsync(instance.api.add);\n      if (EJSON.isBinary(content) && content.buffer) {\n        content = new Buffer(new Uint8Array(content.buffer));\n      } else {\n        content = new Buffer(content);\n      }\n\n      wrappedApi(content, function (err, res) {\n        if (err || !res) {\n          return wrappedFiber.throw(err);\n        }\n        wrappedFiber.return(res[0].Hash);\n      });\n\n      return wrappedFiber.wait();\n    }\n  }\n);"]}