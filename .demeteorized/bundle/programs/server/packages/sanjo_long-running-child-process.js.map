{"version":3,"sources":["meteor://ðŸ’»app/packages/sanjo_long-running-child-process/lib/log.js","meteor://ðŸ’»app/packages/sanjo_long-running-child-process/lib/meteor/files.js","meteor://ðŸ’»app/packages/sanjo_long-running-child-process/lib/LongRunningChildProcess.coffee","meteor://ðŸ’»app/packages/sanjo_long-running-child-process/main.js"],"names":[],"mappings":"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","file":"/packages/sanjo_long-running-child-process.js","sourcesContent":["log = loglevel.createPackageLogger(\n  '[sanjo:long-running-child-process]',\n  process.env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL || 'info'\n)\n","/**\n * Copied from Meteor tools/files.js.\n *\n * Includes:\n * - Helper to find the app root path\n */\n\nvar path = Npm.require('path');\nvar fs = Npm.require('fs');\n\n// given a predicate function and a starting path, traverse upwards\n// from the path until we find a path that satisfies the predicate.\n//\n// returns either the path to the lowest level directory that passed\n// the test or null for none found. if starting path isn't given, use\n// cwd.\nvar findUpwards = function (predicate, startPath) {\n  var testDir = startPath || process.cwd();\n  while (testDir) {\n    if (predicate(testDir)) {\n      break;\n    }\n    var newDir = path.dirname(testDir);\n    if (newDir === testDir) {\n      testDir = null;\n    } else {\n      testDir = newDir;\n    }\n  }\n  if (!testDir)\n    return null;\n\n  return testDir;\n};\n\n// Determine if 'filepath' (a path, or omit for cwd) is within an app\n// directory. If so, return the top-level app directory.\nfindAppDir = function (filepath) {\n  var isAppDir = function (filepath) {\n    // XXX once we are done with the transition to engine, this should\n    // change to: `return fs.existsSync(path.join(filepath, '.meteor',\n    // 'release'))`\n\n    // .meteor/packages can be a directory, if .meteor is a warehouse\n    // directory.  since installing meteor initializes a warehouse at\n    // $HOME/.meteor, we want to make sure your home directory (and all\n    // subdirectories therein) don't count as being within a meteor app.\n    try { // use try/catch to avoid the additional syscall to fs.existsSync\n      return fs.statSync(path.join(filepath, '.meteor', 'packages')).isFile();\n    } catch (e) {\n      return false;\n    }\n  };\n\n  return findUpwards(isAppDir, filepath);\n};\n","fs = Npm.require 'fs-extra'\npath = Npm.require 'path'\nassert = Npm.require 'assert'\nchild_process = Npm.require 'child_process'\n\n@sanjo ?= {}\n\nclass sanjo.LongRunningChildProcess\n\n  taskName: null\n  child: null\n  # Cache the pid, so we don't read the file each time.\n  # This object should be the only one who writes to the pid file.\n  pid: null\n  dead: false\n\n  constructor: (taskName) ->\n    log.debug \"LongRunningChildProcess.constructor(taskName=#{taskName})\"\n\n    @taskName = taskName\n    @pid = @readPid()\n\n\n  getTaskName: ->\n    @taskName\n\n\n  getChild: ->\n    @child\n\n\n  getPid: ->\n    @pid\n\n\n  _setPid: (pid) ->\n    log.debug \"LongRunningChildProcess._setPid(pid=#{pid})\"\n    @pid = pid\n    log.debug \"Saving #{@taskName} pid #{pid} to #{@_getPidFilePath()}\"\n    fs.outputFile(@_getPidFilePath(), \"#{pid}\")\n\n\n  isDead: ->\n    @dead\n\n\n  isRunning: ->\n    log.debug 'LongRunningChildProcess.isRunning()'\n\n    pid = @getPid()\n\n    if not pid\n      log.debug \"LongRunningChildProcess.isRunning returns false\"\n      return false\n\n    try\n    # Check for the existence of the process without killing it, by sending signal 0.\n      process.kill(pid, 0)\n      # process is alive, otherwise an exception would have been thrown, so we need to exit.\n      log.debug \"LongRunningChildProcess.isRunning returns true\"\n      return true\n    catch err\n      log.trace err\n      log.debug \"LongRunningChildProcess.isRunning returns false\"\n      return false\n\n\n  # Returns the pid of the main Meteor app process\n  _getMeteorPid: ->\n    parentPid = null\n    # For Meteor < 1.0.3\n    parentPidIndex = _.indexOf(process.argv, '--parent-pid')\n    if parentPidIndex != -1\n      parentPid = process.argv[parentPidIndex + 1]\n      log.debug(\"The pid of the main Meteor app process is #{parentPid}\")\n    # For Meteor >= 1.0.3\n    else if process.env.METEOR_PARENT_PID\n      parentPid = process.env.METEOR_PARENT_PID\n      log.debug(\"The pid of the main Meteor app process is #{parentPid}\")\n    else\n      log.error('Could not find the pid of the main Meteor app process')\n\n    return parentPid\n\n\n  _getMeteorAppPath: ->\n    @appPath = path.resolve(findAppDir()) if not @appPath\n    return @appPath\n\n\n  _getMeteorLocalPath: ->\n    path.join(@_getMeteorAppPath(), '.meteor/local')\n\n\n  _getPidFilePath: ->\n    path.join(@_getMeteorLocalPath(), \"run/#{@taskName}.pid\")\n\n\n  _getLogFilePath: ->\n    path.join(@_getMeteorLocalPath(), \"log/#{@taskName}.log\")\n\n\n  _getSpawnScriptPath: ->\n    path.join(@_getMeteorLocalPath(),\n      'build/programs/server/assets/packages/' +\n      'sanjo_long-running-child-process/lib/spawnScript.js'\n    )\n\n\n  readPid: ->\n    log.debug('LongRunningChildProcess.readPid()')\n    try\n      pid = parseInt(fs.readFileSync(@_getPidFilePath(), {encoding: 'utf8'}, 10))\n      log.debug(\"LongRunningChildProcess.readPid returns #{pid}\")\n      return pid\n    catch err\n      log.debug('LongRunningChildProcess.readPid returns null')\n      return null\n\n\n  spawn: (options) ->\n    log.debug \"LongRunningChildProcess.spawn()\", options\n    check options, Match.ObjectIncluding({\n        command: String\n        args: [Match.Any]\n        options: Match.Optional(Match.ObjectIncluding({\n          cwd: Match.Optional(Match.OneOf(String, undefined))\n          env: Match.Optional(Object)\n          stdio: Match.Optional(Match.OneOf(String, [Match.Any]))\n        }))\n      }\n    )\n\n    options.options = {} unless options.options\n\n    if @isRunning()\n      return false\n\n    logFile = @_getLogFilePath()\n    fs.ensureDirSync(path.dirname(logFile))\n\n    if options.options.stdio\n      stdio = options.options.stdio\n    else\n      @fout = fs.openSync(logFile, 'w')\n      stdio = ['ignore', @fout, @fout]\n\n    nodePath = process.execPath\n    nodeDir = path.dirname(nodePath)\n    env = _.clone(options.options.env or process.env)\n    # Expose the Meteor node binary path for the script that is run\n    env.PATH = nodeDir + ':' + (env.PATH or process.env.PATH)\n    if process.env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL and not env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL\n      env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL = process.env.LONG_RUNNING_CHILD_PROCESS_LOG_LEVEL\n    spawnOptions = {\n      cwd: options.options.cwd or @_getMeteorAppPath(),\n      env: env,\n      detached: true,\n      stdio: stdio\n    }\n    command = path.basename options.command\n    spawnScript = @_getSpawnScriptPath()\n    commandArgs = [spawnScript, @_getMeteorPid(), @_getPidFilePath(), @taskName, options.command].concat(options.args)\n    fs.chmodSync(spawnScript, 0o544)\n\n    log.debug(\"LongRunningChildProcess.spawn is spawning '#{command}'\")\n\n    @child = child_process.spawn(nodePath, commandArgs, spawnOptions)\n    @dead = false\n    @_setPid(@child.pid)\n\n    @child.on \"exit\", (code) =>\n      log.debug \"LongRunningChildProcess: child_process.on 'exit': command=#{command} code=#{code}\"\n      fs.closeSync(@fout) if @fout\n\n    return true\n\n\n  kill: (signal = \"SIGINT\") ->\n    log.debug \"LongRunningChildProcess.kill(signal=#{signal})\"\n\n    unless @dead\n      try\n      # Providing a negative pid will kill the entire process group,\n      # i.e. the process and all it's children\n      # See man kill for more info\n      #process.kill(-@child.pid, signal)\n        if @child?\n          @child.kill(signal)\n        else\n          pid = @getPid()\n          process.kill(pid, signal)\n        @dead = true\n        @pid = null\n        fs.removeSync(@_getPidFilePath())\n      catch err\n        log.warn \"Error: While killing process:\\n\", err\n\n\n# Expose the imports in testing mode to make it possible to mock them\nif process.env.IS_MIRROR == 'true'\n  sanjo.LongRunningChildProcess.fs = fs\n  sanjo.LongRunningChildProcess.path = path\n  sanjo.LongRunningChildProcess.assert = assert\n  sanjo.LongRunningChildProcess.child_process = child_process\n","/* globals LongRunningChildProcess: true */\n\nLongRunningChildProcess = sanjo.LongRunningChildProcess\n"]}