{"version":3,"sources":["meteor://ðŸ’»app/packages/practicalmeteor_loglevel/packages/practicalmeteor_loglevel.js"],"names":[],"mappingsfile":"/packages/practicalmeteor_loglevel.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/practicalmeteor:loglevel/loglevel.js                                                            //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\n/*! loglevel - v1.1.0 - https://github.com/pimterry/loglevel - (c) 2014 Tim Perry - licensed MIT */         // 1\n                                                                                                            // 2\nLoglevel = function (options) {                                                                             // 3\n    var self = {};                                                                                          // 4\n    if(options && options.prefix) {                                                                         // 5\n      self.prefix = options.prefix;                                                                         // 6\n    } else {                                                                                                // 7\n      self.prefix = '';                                                                                     // 8\n    }                                                                                                       // 9\n    if(options && options.level) {                                                                          // 10\n      self.level = options.level;                                                                           // 11\n    } else {                                                                                                // 12\n      self.level = 'info';                                                                                  // 13\n    }                                                                                                       // 14\n    var noop = function() {};                                                                               // 15\n    var undefinedType = \"undefined\";                                                                        // 16\n                                                                                                            // 17\n    function realMethod(methodName) {                                                                       // 18\n        if (typeof console === undefinedType) {                                                             // 19\n            return noop;                                                                                    // 20\n        } else if (console[methodName] === undefined) {                                                     // 21\n            if (console.log !== undefined) {                                                                // 22\n                return boundToConsole(console, 'log');                                                      // 23\n            } else {                                                                                        // 24\n                return noop;                                                                                // 25\n            }                                                                                               // 26\n        } else {                                                                                            // 27\n            return boundToConsole(console, methodName);                                                     // 28\n        }                                                                                                   // 29\n    }                                                                                                       // 30\n                                                                                                            // 31\n    function boundToConsole(console, methodName) {                                                          // 32\n        var method = console[methodName];                                                                   // 33\n        if (method.bind === undefined) {                                                                    // 34\n            if (Function.prototype.bind === undefined) {                                                    // 35\n                return functionBindingWrapper(method, console);                                             // 36\n            } else {                                                                                        // 37\n                try {                                                                                       // 38\n                    console.log('Binding' + methodName);                                                    // 39\n                    return Function.prototype.bind.call(console[methodName], console, self.prefix);         // 40\n                } catch (e) {                                                                               // 41\n                    // In IE8 + Modernizr, the bind shim will reject the above, so we fall back to wrapping // 42\n                    return functionBindingWrapper(method, console);                                         // 43\n                }                                                                                           // 44\n            }                                                                                               // 45\n        } else {                                                                                            // 46\n            return console[methodName].bind(console, self.prefix);                                          // 47\n        }                                                                                                   // 48\n    }                                                                                                       // 49\n                                                                                                            // 50\n    function functionBindingWrapper(f, context) {                                                           // 51\n        return function() {                                                                                 // 52\n            Function.prototype.apply.apply(f, [context, arguments]);                                        // 53\n        };                                                                                                  // 54\n    }                                                                                                       // 55\n                                                                                                            // 56\n    var logMethods = [                                                                                      // 57\n        \"trace\",                                                                                            // 58\n        \"debug\",                                                                                            // 59\n        \"info\",                                                                                             // 60\n        \"warn\",                                                                                             // 61\n        \"error\"                                                                                             // 62\n    ];                                                                                                      // 63\n                                                                                                            // 64\n    function replaceLoggingMethods(methodFactory) {                                                         // 65\n        for (var ii = 0; ii < logMethods.length; ii++) {                                                    // 66\n            self[logMethods[ii]] = methodFactory(logMethods[ii]);                                           // 67\n        }                                                                                                   // 68\n    }                                                                                                       // 69\n                                                                                                            // 70\n    function cookiesAvailable() {                                                                           // 71\n        return (typeof window !== undefinedType &&                                                          // 72\n                window.document !== undefined &&                                                            // 73\n                window.document.cookie !== undefined);                                                      // 74\n    }                                                                                                       // 75\n                                                                                                            // 76\n    function localStorageAvailable() {                                                                      // 77\n        try {                                                                                               // 78\n            return (typeof window !== undefinedType &&                                                      // 79\n                    window.localStorage !== undefined &&                                                    // 80\n                    window.localStorage !== null);                                                          // 81\n        } catch (e) {                                                                                       // 82\n            return false;                                                                                   // 83\n        }                                                                                                   // 84\n    }                                                                                                       // 85\n                                                                                                            // 86\n    function persistLevelIfPossible(levelNum) {                                                             // 87\n        var localStorageFail = false,                                                                       // 88\n            levelName;                                                                                      // 89\n                                                                                                            // 90\n        for (var key in self.levels) {                                                                      // 91\n            if (self.levels.hasOwnProperty(key) && self.levels[key] === levelNum) {                         // 92\n                levelName = key;                                                                            // 93\n                break;                                                                                      // 94\n            }                                                                                               // 95\n        }                                                                                                   // 96\n                                                                                                            // 97\n        if (localStorageAvailable()) {                                                                      // 98\n            /*                                                                                              // 99\n             * Setting localStorage can create a DOM 22 Exception if running in Private mode                // 100\n             * in Safari, so even if it is available we need to catch any errors when trying                // 101\n             * to write to it                                                                               // 102\n             */                                                                                             // 103\n            try {                                                                                           // 104\n                window.localStorage['loglevel'] = levelName;                                                // 105\n            } catch (e) {                                                                                   // 106\n                localStorageFail = true;                                                                    // 107\n            }                                                                                               // 108\n        } else {                                                                                            // 109\n            localStorageFail = true;                                                                        // 110\n        }                                                                                                   // 111\n                                                                                                            // 112\n        if (localStorageFail && cookiesAvailable()) {                                                       // 113\n            window.document.cookie = \"loglevel=\" + levelName + \";\";                                         // 114\n        }                                                                                                   // 115\n    }                                                                                                       // 116\n                                                                                                            // 117\n    var cookieRegex = /loglevel=([^;]+)/;                                                                   // 118\n                                                                                                            // 119\n    function loadPersistedLevel() {                                                                         // 120\n        var storedLevel;                                                                                    // 121\n                                                                                                            // 122\n        if (localStorageAvailable()) {                                                                      // 123\n            storedLevel = window.localStorage['loglevel'];                                                  // 124\n        }                                                                                                   // 125\n                                                                                                            // 126\n        if (storedLevel === undefined && cookiesAvailable()) {                                              // 127\n            var cookieMatch = cookieRegex.exec(window.document.cookie) || [];                               // 128\n            storedLevel = cookieMatch[1];                                                                   // 129\n        }                                                                                                   // 130\n                                                                                                            // 131\n        if (self.levels[storedLevel] === undefined) {                                                       // 132\n            storedLevel = \"WARN\";                                                                           // 133\n        }                                                                                                   // 134\n                                                                                                            // 135\n        self.setLevel(self.levels[storedLevel]);                                                            // 136\n    }                                                                                                       // 137\n                                                                                                            // 138\n    /*                                                                                                      // 139\n     *                                                                                                      // 140\n     * Public API                                                                                           // 141\n     *                                                                                                      // 142\n     */                                                                                                     // 143\n                                                                                                            // 144\n    self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,                                           // 145\n        \"ERROR\": 4, \"SILENT\": 5};                                                                           // 146\n                                                                                                            // 147\n    self.setLevel = function (level) {                                                                      // 148\n        if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {                       // 149\n            self.level = level;                                                                             // 150\n            //persistLevelIfPossible(level);                                                                // 151\n                                                                                                            // 152\n            if (level === self.levels.SILENT) {                                                             // 153\n                replaceLoggingMethods(function () {                                                         // 154\n                    return noop;                                                                            // 155\n                });                                                                                         // 156\n                return;                                                                                     // 157\n            } else if (typeof console === undefinedType) {                                                  // 158\n                replaceLoggingMethods(function (methodName) {                                               // 159\n                    return function () {                                                                    // 160\n                        if (typeof console !== undefinedType) {                                             // 161\n                            self.setLevel(level);                                                           // 162\n                            self[methodName].apply(self, arguments);                                        // 163\n                        }                                                                                   // 164\n                    };                                                                                      // 165\n                });                                                                                         // 166\n                return \"No console available for logging\";                                                  // 167\n            } else {                                                                                        // 168\n                replaceLoggingMethods(function (methodName) {                                               // 169\n                    if (level <= self.levels[methodName.toUpperCase()]) {                                   // 170\n                        return realMethod(methodName);                                                      // 171\n                    } else {                                                                                // 172\n                        return noop;                                                                        // 173\n                    }                                                                                       // 174\n                });                                                                                         // 175\n            }                                                                                               // 176\n        } else if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {           // 177\n            self.setLevel(self.levels[level.toUpperCase()]);                                                // 178\n        } else {                                                                                            // 179\n            throw \"log.setLevel() called with invalid level: \" + level;                                     // 180\n        }                                                                                                   // 181\n    };                                                                                                      // 182\n                                                                                                            // 183\n    self.enableAll = function() {                                                                           // 184\n        self.setLevel(self.levels.TRACE);                                                                   // 185\n    };                                                                                                      // 186\n                                                                                                            // 187\n    self.disableAll = function() {                                                                          // 188\n        self.setLevel(self.levels.SILENT);                                                                  // 189\n    };                                                                                                      // 190\n                                                                                                            // 191\n  self.setLevel(self.level);                                                                                // 192\n  return self;                                                                                              // 193\n};                                                                                                          // 194\n                                                                                                            // 195\nlog = Loglevel({prefix: 'practicalmeteor:loglevel:'});                                                      // 196\n                                                                                                            // 197\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/practicalmeteor:loglevel/LoggerFactory.coffee.js                                                //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n             \n\nif (this.practical == null) {\n  this.practical = {};\n}\n\npractical.LoggerFactory = (function() {\n  var instance;\n\n  function LoggerFactory() {}\n\n  instance = null;\n\n  LoggerFactory.get = function() {\n    return instance != null ? instance : instance = new practical.LoggerFactory();\n  };\n\n  LoggerFactory.prototype._getSettingsLoglevel = function(namespace, defaultLevel) {\n    var globalLevel, level;\n    if (namespace == null) {\n      namespace = '';\n    }\n    if (defaultLevel == null) {\n      defaultLevel = 'info';\n    }\n    expect(namespace).to.be.a('string');\n    expect(defaultLevel).to.be.a('string').that.has.length.above(0);\n    globalLevel = this._getNamespaceLoglevel('global');\n    if (globalLevel != null) {\n      return globalLevel;\n    }\n    if (namespace.length > 0) {\n      level = this._getNamespaceLoglevel(namespace);\n    }\n    if (level == null) {\n      level = this._getNamespaceLoglevel('default');\n    }\n    return level != null ? level : level = defaultLevel;\n  };\n\n  LoggerFactory.prototype._getNamespaceLoglevel = function(namespace) {\n    var level, serverLevel, _ref, _ref1, _ref2, _ref3, _ref4;\n    expect(namespace).to.be.a('string').that.has.length.above(0);\n    level = (_ref = Meteor.settings) != null ? (_ref1 = _ref[\"public\"]) != null ? (_ref2 = _ref1.loglevel) != null ? _ref2[namespace] : void 0 : void 0 : void 0;\n    if (Meteor.isServer) {\n      serverLevel = (_ref3 = Meteor.settings) != null ? (_ref4 = _ref3.loglevel) != null ? _ref4[namespace] : void 0 : void 0;\n      if (serverLevel != null) {\n        level = serverLevel;\n      }\n    }\n    return level;\n  };\n\n  LoggerFactory.prototype.createLogger = function(namespace, defaultLevel) {\n    var options;\n    if (namespace == null) {\n      namespace = '';\n    }\n    if (defaultLevel == null) {\n      defaultLevel = 'info';\n    }\n    log.debug('LoggerFactory.createLogger()', arguments);\n    expect(namespace).to.be.a('string');\n    expect(defaultLevel).to.be.a('string').that.has.length.above(0);\n    expect(Loglevel).to.be.a('function');\n    options = {};\n    if (namespace.length > 0) {\n      options.prefix = namespace + ':';\n    }\n    options.level = this._getSettingsLoglevel(namespace, defaultLevel);\n    return Loglevel(options);\n  };\n\n  LoggerFactory.prototype.createPackageLogger = function(packageName, defaultLevel) {\n    if (defaultLevel == null) {\n      defaultLevel = 'info';\n    }\n    return this.createLogger(packageName, defaultLevel);\n  };\n\n  LoggerFactory.prototype.createAppLogger = function(appName, defaultLevel) {\n    if (appName == null) {\n      appName = 'app';\n    }\n    if (defaultLevel == null) {\n      defaultLevel = 'info';\n    }\n    return this.createLogger(appName, defaultLevel);\n  };\n\n  return LoggerFactory;\n\n})();\n\nloglevel = practical.LoggerFactory.get();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}